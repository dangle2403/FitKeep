
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma_client"
}
enum Role {
  USER
  ADMIN
}

enum ViewType {
  DAY
  WEEK
  MONTH
}

enum RepeatType {
  NONE        // no repeat
  DAILY       // every day
  WEEKLY      // every week (choose weekdays)
}
model Schedule {
  id        String             @id @default(uuid())
  date      DateTime
  userId    String
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  exercises ScheduleExercise[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  @@index([userId, date])
  @@map("schedules")
}

// Exercise planned for a schedule (self-contained)
model ScheduleExercise {
  id          String     @id @default(uuid())
  scheduleId  String
  userId      String

  name        String
  description String?
  sets        Int
  reps        Int
  weight      Float?
  restTime    Int?
  note        String?

  repeatType  RepeatType @default(NONE)
  weekdays    Int[]      // store 0-6 if WEEKLY
  startDate   DateTime   @default(now())
  endDate     DateTime?

  schedule    Schedule   @relation(fields: [scheduleId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  logs        ExerciseLog[]

  @@map("schedule_exercises")
}

model ExerciseLog {
  id                String           @id @default(uuid())
  scheduleExerciseId String
  userId            String
  date              DateTime?
  sets              Int
  reps              Int
  weight            Float?
  restTime          Int?

  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  scheduleExercise  ScheduleExercise @relation(fields: [scheduleExerciseId], references: [id], onDelete: Cascade)

  @@index([userId, date])
  @@index([scheduleExerciseId, date])
  @@map("exercise_logs")
}

model UserPreference {
  id       String   @id @default(uuid())
  userId   String   @unique
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  viewType ViewType @default(DAY)
}

// model for authentication and user management

model User {
  id            String     @id @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  name          String
  email         String     @unique
  emailVerified Boolean
  image         String?
  role          Role       @default(USER)
  sessions      Session[]
  accounts      Account[]
  preferences  UserPreference?
  schedules   Schedule[]
  scheduleExercises ScheduleExercise[]
  logs         ExerciseLog[]

  @@map("users")
}

model Session {
  id        String   @id  @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id @default(uuid())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  @@map("accounts")
}

model Verification {
  id         String    @id  @default(uuid())
  createdAt  DateTime? @default(now())
  updatedAt  DateTime?  @updatedAt
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}
