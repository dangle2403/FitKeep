
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma_client"
}

enum Role{
  USER
  ADMIN
}

model Exercise {
  id          String   @id
  createdAt   DateTime
  title       String
  description String?
  sets        Int?
  reps        Int?
  weight      Float?
  rest        Int?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("exercises")
}

// model for authentication and user management

model User {
  id            String     @id @default(uuid())
  createdAt     DateTime
  updatedAt     DateTime
  name          String
  email         String     @unique
  emailVerified Boolean
  image         String?
  role          Role       @default(USER)
  sessions      Session[]
  accounts      Account[]
  exercises     Exercise[]

  @@map("users")
}

model Session {
  id        String   @id  @default(uuid())
  createdAt DateTime
  updatedAt DateTime
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                    String    @id @default(uuid())
  createdAt             DateTime
  updatedAt             DateTime
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?

  @@map("accounts")
}

model Verification {
  id         String    @id  @default(uuid())
  createdAt  DateTime?
  updatedAt  DateTime?
  identifier String
  value      String
  expiresAt  DateTime

  @@map("verifications")
}
